{
  "address": "0xe2c015abb52e22227354f78297f0c2de3807b311",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract FNS",
          "name": "_fns",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedRegistrarController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedReverseRegistrar",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newAddress",
          "type": "bytes"
        }
      ],
      "name": "AddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "hash",
          "type": "bytes"
        }
      ],
      "name": "ContenthashChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NameChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "indexedKey",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "TextChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newVersion",
          "type": "uint64"
        }
      ],
      "name": "VersionChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "clearRecords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "contenthash",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nodehash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicallWithNodeCheck",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "recordVersions",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "a",
          "type": "bytes"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "coinTypes",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "addrs",
          "type": "bytes[]"
        }
      ],
      "name": "setAddrs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "hash",
          "type": "bytes"
        }
      ],
      "name": "setContenthash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setText",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string[]",
          "name": "keys",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "values",
          "type": "string[]"
        }
      ],
      "name": "setTexts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "text",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xccc072384ed163e0429b322cf7da045857399e5a16466932959418355f36570e",
  "receipt": {
    "to": null,
    "from": "0x76346fac442f153ed8691ff88b1297643260d8a0",
    "contractAddress": "0xe2c015abb52e22227354f78297f0c2de3807b311",
    "transactionIndex": "0x2",
    "gasUsed": "0x2d127ea",
    "logsBloom": "0x
    "blockHash": "0xad94b6dff15a445675674aa7a6c035c2e70d1079f94cf7210cf7468c986f23c7",
    "transactionHash": "0xccc072384ed163e0429b322cf7da045857399e5a16466932959418355f36570e",
    "logs": [],
    "blockNumber": "0x9f8",
    "cumulativeGasUsed": "0x0",
    "status": "0x1"
  },
  "args": [
    "0x889d4f6667ab1aa0a77bc8befbfc9dca5d6ead3d",
    "0x12aea3f77ae98b33f27f20825b15e4ab8b381684",
    "0x7b053507c2e0f9be1632c4b17c2e871c1770cb14"
  ],
  "numDeployments": 1,
  "solcInputHash": "446d61758c69233e2178bb67037dbc3c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract FNS\",\"name\":\"_fns\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedRegistrarController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedReverseRegistrar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodehash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicallWithNodeCheck\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"coinTypes\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"addrs\",\"type\":\"bytes[]\"}],\"name\":\"setAddrs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setContenthash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"name\":\"setTexts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addr(bytes32)\":{\"params\":{\"node\":\"The FNS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}},\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"contenthash(bytes32)\":{\"params\":{\"node\":\"The FNS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"name(bytes32)\":{\"params\":{\"node\":\"The FNS node to query.\"},\"returns\":{\"_0\":\"The associated name.\"}},\"setAddr(bytes32,address)\":{\"params\":{\"a\":\"The address to set.\",\"node\":\"The node to update.\"}},\"setAddr(bytes32,uint256,bytes)\":{\"params\":{\"a\":\"The address to set.\",\"coinType\":\"The coin type of the address.\",\"node\":\"The node to update.\"}},\"setAddrs(bytes32,uint256[],bytes[])\":{\"params\":{\"addrs\":\"The addresses to set.\",\"coinTypes\":\"The coin types of the addresses.\",\"node\":\"The node to update.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setContenthash(bytes32,bytes)\":{\"params\":{\"hash\":\"The contenthash to set\",\"node\":\"The node to update.\"}},\"setName(bytes32,string)\":{\"params\":{\"node\":\"The node to update.\"}},\"setText(bytes32,string,string)\":{\"params\":{\"key\":\"The key to set.\",\"node\":\"The node to update.\",\"value\":\"The text data value to set.\"}},\"setTexts(bytes32,string[],string[])\":{\"params\":{\"keys\":\"The keys to set.\",\"node\":\"The node to update.\",\"values\":\"The text data value to set.\"}},\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The FNS node to query.\"},\"returns\":{\"_0\":\"The associated text data.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an FNS node.\"},\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an FNS node. May only be called by the owner of that node in the FNS registry.\"},\"contenthash(bytes32)\":{\"notice\":\"Returns the contenthash associated with an FNS node.\"},\"name(bytes32)\":{\"notice\":\"Returns the name associated with an FNS node, for reverse records. Defined in EIP181.\"},\"setAddr(bytes32,address)\":{\"notice\":\"Sets the address associated with an FNS node. May only be called by the owner of that node in the FNS registry.\"},\"setAddr(bytes32,uint256,bytes)\":{\"notice\":\"Sets the address associated with an FNS node. May only be called by the owner of that node in the FNS registry.\"},\"setAddrs(bytes32,uint256[],bytes[])\":{\"notice\":\"Sets the addresses associated with FNS node. May only be called by the owner of that node in the FNS registry.\"},\"setContenthash(bytes32,bytes)\":{\"notice\":\"Sets the contenthash associated with an FNS node. May only be called by the owner of that node in the FNS registry.\"},\"setName(bytes32,string)\":{\"notice\":\"Sets the name associated with an FNS node, for reverse records. May only be called by the owner of that node in the FNS registry.\"},\"setText(bytes32,string,string)\":{\"notice\":\"Sets the text data associated with an FNS node and key. May only be called by the owner of that node in the FNS registry.\"},\"setTexts(bytes32,string[],string[])\":{\"notice\":\"Sets the text data associated with an FNS node and keys. May only be called by the owner of that node in the FNS registry.\"},\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an FNS node and key.\"}},\"notice\":\"A simple resolver anyone can use; only allows the owner of a node to set its address.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PublicResolver.sol\":\"PublicResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Multicallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\nimport \\\"./interfaces/IMulticallable.sol\\\";\\nimport \\\"./libs/ERC165.sol\\\";\\n\\nabstract contract Multicallable is IMulticallable, ERC165 {\\n    function _multicall(bytes32 nodehash, bytes[] calldata data) internal returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (nodehash != bytes32(0)) {\\n                bytes32 txNamehash = bytes32(data[i][4:36]);\\n                require(txNamehash == nodehash, \\\"multicall: All records must have a matching namehash\\\");\\n            }\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n            require(success);\\n            results[i] = result;\\n        }\\n        return results;\\n    }\\n\\n    // This function provides an extra security check when called\\n    // from priviledged contracts (such as RegistrarController)\\n    // that can set records on behalf of the node owners\\n    function multicallWithNodeCheck(bytes32 nodehash, bytes[] calldata data) external returns (bytes[] memory results) {\\n        return _multicall(nodehash, data);\\n    }\\n\\n    function multicall(bytes[] calldata data) public override returns (bytes[] memory results) {\\n        return _multicall(bytes32(0), data);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\\n        return interfaceID == type(IMulticallable).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xdb8694665e57a97f05b69ca4d6a32fe3a56162d0845739598f0dd6141639bddb\",\"license\":\"MIT\"},\"contracts/PublicResolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\nimport \\\"./interfaces/FNS.sol\\\";\\nimport \\\"./resolvers/AddressResolver.sol\\\";\\nimport \\\"./resolvers/ContentHashResolver.sol\\\";\\nimport \\\"./resolvers/NameResolver.sol\\\";\\nimport \\\"./resolvers/TextResolver.sol\\\";\\nimport \\\"./Multicallable.sol\\\";\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver is Multicallable, AddressResolver, ContentHashResolver, NameResolver, TextResolver {\\n    FNS immutable fns;\\n    address immutable trustedRegistrarController;\\n    address immutable trustedReverseRegistrar;\\n\\n    /**\\n     * A mapping of operators. An address that is authorised for an address\\n     * may make any changes to the name that the owner could, but may not update\\n     * the set of authorisations.\\n     * (owner, operator) => approved\\n     */\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    constructor(\\n        FNS _fns,\\n        address _trustedRegistrarController,\\n        address _trustedReverseRegistrar\\n    ) {\\n        fns = _fns;\\n        trustedRegistrarController = _trustedRegistrarController;\\n        trustedReverseRegistrar = _trustedReverseRegistrar;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external {\\n        require(msg.sender != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    function isAuthorised(bytes32 node) internal view override returns (bool) {\\n        if (msg.sender == trustedRegistrarController || msg.sender == trustedReverseRegistrar) {\\n            return true;\\n        }\\n        address owner = fns.owner(node);\\n        return owner == msg.sender || isApprovedForAll(owner, msg.sender);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID)\\n        public\\n        view\\n        override(Multicallable, AddressResolver, ContentHashResolver, NameResolver, TextResolver)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xf00c2a76aac34d376668a5bd70d8c0b5179f725fa9613cee774bb922a2fd7bbf\",\"license\":\"MIT\"},\"contracts/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\nimport \\\"./libs/ERC165.sol\\\";\\nimport \\\"./resolvers/IVersionableResolver.sol\\\";\\n\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\n    mapping(bytes32 => uint64) public recordVersions;\\n\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    /**\\n     * Increments the record version associated with an FNS node.\\n     * May only be called by the owner of that node in the FNS registry.\\n     * @param node The node to update.\\n     */\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\n        recordVersions[node]++;\\n        emit VersionChanged(node, recordVersions[node]);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\\n        return interfaceID == type(IVersionableResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x948efe8095dd2ec725f7d67706b0d46ce0feac630b2f6ff6d983f80c1bc59339\",\"license\":\"MIT\"},\"contracts/interfaces/FNS.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\ninterface FNS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address indexed owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\\n\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\\n\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns (bytes32);\\n\\n    function setSubnodeResolver(bytes32 node, bytes32 label, address resolver) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x84f0d500ebbf70e6121714f8f481878c3853443cebb2c9493118bf68ee0a7c35\",\"license\":\"MIT\"},\"contracts/interfaces/IMulticallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\ninterface IMulticallable {\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(bytes32, bytes[] calldata data) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x9865c8f7899ac58c810f0bae6b46c4b41a796639a9be65ad9472048b38366663\",\"license\":\"MIT\"},\"contracts/libs/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\npragma solidity >=0.8.17;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x4ed89043f667d51decc2231b67ea2d00dd6263bb5ea2b5acf6915e32c9dd2070\",\"license\":\"MIT\"},\"contracts/libs/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.8.17;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x491bff38bb07c6dea3f2f083094fce54377c073cdab1fbcbde78196a5878b1ef\",\"license\":\"MIT\"},\"contracts/resolvers/AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./IAddressResolver.sol\\\";\\n\\nabstract contract AddressResolver is IAddressResolver, ResolverBase {\\n    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\\n    uint256 private constant COIN_TYPE_FIL = 461;\\n\\n    mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes))) versionable_addresses;\\n\\n    /**\\n     * Sets the address associated with an FNS node.\\n     * May only be called by the owner of that node in the FNS registry.\\n     * @param node The node to update.\\n     * @param a The address to set.\\n     */\\n    function setAddr(bytes32 node, address a) external virtual authorised(node) {\\n        setAddr(node, COIN_TYPE_FIL, addressToBytes(a));\\n    }\\n\\n    /**\\n     * Returns the address associated with an FNS node.\\n     * @param node The FNS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) public view virtual returns (address payable) {\\n        bytes memory a = addr(node, COIN_TYPE_FIL);\\n        if (a.length == 0) {\\n            return payable(0);\\n        }\\n        return bytesToAddress(a);\\n    }\\n\\n    /**\\n     * Sets the address associated with an FNS node.\\n     * May only be called by the owner of that node in the FNS registry.\\n     * @param node The node to update.\\n     * @param coinType The coin type of the address.\\n     * @param a The address to set.\\n     */\\n    function setAddr(bytes32 node, uint256 coinType, bytes memory a) public virtual authorised(node) {\\n        emit AddressChanged(node, coinType, a);\\n        versionable_addresses[recordVersions[node]][node][coinType] = a;\\n    }\\n\\n    /**\\n     * Sets the addresses associated with FNS node.\\n     * May only be called by the owner of that node in the FNS registry.\\n     * @param node The node to update.\\n     * @param coinTypes The coin types of the addresses.\\n     * @param addrs The addresses to set.\\n     */\\n    function setAddrs(bytes32 node, uint256[] calldata coinTypes, bytes[] calldata addrs)\\n        public\\n        virtual\\n        authorised(node)\\n    {\\n        uint256 count = coinTypes.length;\\n        require(addrs.length == count, \\\"length\\\");\\n        for (uint256 i = 0; i < count; i++) {\\n            uint256 coinType = coinTypes[i];\\n            versionable_addresses[recordVersions[node]][node][coinType] = addrs[i];\\n            emit AddressChanged(node, coinType, addrs[i]);\\n        }\\n    }\\n\\n    function addr(bytes32 node, uint256 coinType) public view virtual override returns (bytes memory) {\\n        return versionable_addresses[recordVersions[node]][node][coinType];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\\n        return interfaceID == type(IAddressResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n\\n    function bytesToAddress(bytes memory b) internal pure returns (address payable a) {\\n        require(b.length == 20);\\n        assembly {\\n            a := div(mload(add(b, 32)), exp(256, 12))\\n        }\\n    }\\n\\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\\n        b = new bytes(20);\\n        assembly {\\n            mstore(add(b, 32), mul(a, exp(256, 12)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0411726c60c068e361fb669da994ac4e04fd35f60fe9b1eae12ce859af676864\",\"license\":\"MIT\"},\"contracts/resolvers/ContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./IContentHashResolver.sol\\\";\\n\\nabstract contract ContentHashResolver is IContentHashResolver, ResolverBase {\\n    mapping(uint64 => mapping(bytes32 => bytes)) versionable_hashes;\\n\\n    /**\\n     * Sets the contenthash associated with an FNS node.\\n     * May only be called by the owner of that node in the FNS registry.\\n     * @param node The node to update.\\n     * @param hash The contenthash to set\\n     */\\n    function setContenthash(bytes32 node, bytes calldata hash) external virtual authorised(node) {\\n        versionable_hashes[recordVersions[node]][node] = hash;\\n        emit ContenthashChanged(node, hash);\\n    }\\n\\n    /**\\n     * Returns the contenthash associated with an FNS node.\\n     * @param node The FNS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view virtual override returns (bytes memory) {\\n        return versionable_hashes[recordVersions[node]][node];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\\n        return interfaceID == type(IContentHashResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xb6ad0193772c9a466935e7d21baeb3f7a33e22f7d54c0d009323a444b7e47c2b\",\"license\":\"MIT\"},\"contracts/resolvers/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\n/**\\n * Interface for the new (multicoin) address function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(bytes32 indexed node, uint256 coinType, bytes newAddress);\\n\\n    function addr(bytes32 node) external view returns (address payable);\\n\\n    function addr(bytes32 node, uint256 coinType) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x77db41187aa559cdf6649b43a7b4896d331fa2a11fac4b718207caed9976a1a8\",\"license\":\"MIT\"},\"contracts/resolvers/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an FNS node.\\n     * @param node The FNS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x92f382b944d146dc1f355ab0b4d24b207ab5c023d4355f1837e593c0aeae6bae\",\"license\":\"MIT\"},\"contracts/resolvers/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an FNS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The FNS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7440779c4bffbcb0de2e59b2ce088a5eb28a02355ee4e703c543cecbe2546fd0\",\"license\":\"MIT\"},\"contracts/resolvers/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\ninterface ITextResolver {\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key, string value);\\n\\n    /**\\n     * Returns the text data associated with an FNS node and key.\\n     * @param node The FNS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string calldata key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3c89623c75dfc545654a2d3c654e2bd31f7661683e354b9d90a438e72c0b76d5\",\"license\":\"MIT\"},\"contracts/resolvers/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x338895bf2cb69806b1da5ccaffc7a3e47d199845ba00c76f51f4b0d5a3246a5f\",\"license\":\"MIT\"},\"contracts/resolvers/NameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./INameResolver.sol\\\";\\n\\nabstract contract NameResolver is INameResolver, ResolverBase {\\n    mapping(uint64 => mapping(bytes32 => string)) versionable_names;\\n\\n    /**\\n     * Sets the name associated with an FNS node, for reverse records.\\n     * May only be called by the owner of that node in the FNS registry.\\n     * @param node The node to update.\\n     */\\n    function setName(bytes32 node, string calldata newName) external virtual authorised(node) {\\n        versionable_names[recordVersions[node]][node] = newName;\\n        emit NameChanged(node, newName);\\n    }\\n\\n    /**\\n     * Returns the name associated with an FNS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The FNS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view virtual override returns (string memory) {\\n        return versionable_names[recordVersions[node]][node];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\\n        return interfaceID == type(INameResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x63242b70ae1344abe9b4ef9f52211105042b8836eaeeebe5fde67c282e3be3ac\",\"license\":\"MIT\"},\"contracts/resolvers/TextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./ITextResolver.sol\\\";\\n\\nabstract contract TextResolver is ITextResolver, ResolverBase {\\n    mapping(uint64 => mapping(bytes32 => mapping(string => string))) versionable_texts;\\n\\n    /**\\n     * Sets the text data associated with an FNS node and key.\\n     * May only be called by the owner of that node in the FNS registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(bytes32 node, string calldata key, string calldata value) external virtual authorised(node) {\\n        versionable_texts[recordVersions[node]][node][key] = value;\\n        emit TextChanged(node, key, key, value);\\n    }\\n\\n    /**\\n     * Sets the text data associated with an FNS node and keys.\\n     * May only be called by the owner of that node in the FNS registry.\\n     * @param node The node to update.\\n     * @param keys The keys to set.\\n     * @param values The text data value to set.\\n     */\\n    function setTexts(bytes32 node, string[] calldata keys, string[] calldata values)\\n        external\\n        virtual\\n        authorised(node)\\n    {\\n        uint256 count = keys.length;\\n        require(count == values.length, \\\"length\\\");\\n        for (uint256 i = 0; i < count; i++) {\\n            versionable_texts[recordVersions[node]][node][keys[i]] = values[i];\\n            emit TextChanged(node, keys[i], keys[i], values[i]);\\n        }\\n    }\\n\\n    /**\\n     * Returns the text data associated with an FNS node and key.\\n     * @param node The FNS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string calldata key) external view virtual override returns (string memory) {\\n        return versionable_texts[recordVersions[node]][node][key];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\\n        return interfaceID == type(ITextResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x3c3ab017af112ab238135eef16771b1e792a87cd4251f04793f7f088cd2084fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620033893803806200338983398181016040528101906200003791906200018b565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1681525050505050620001e7565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010e82620000e1565b9050919050565b6000620001228262000101565b9050919050565b620001348162000115565b81146200014057600080fd5b50565b600081519050620001548162000129565b92915050565b620001658162000101565b81146200017157600080fd5b50565b60008151905062000185816200015a565b92915050565b600080600060608486031215620001a757620001a6620000dc565b5b6000620001b78682870162000143565b9350506020620001ca8682870162000174565b9250506040620001dd8682870162000174565b9150509250925092565b60805160a05160c0516131726200021760003960006113720152600061131d015260006113d201526131726000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638b95dd71116100ad578063d700ff3311610071578063d700ff3314610326578063e32954eb14610356578063e845bcdb14610386578063e985e9c5146103a2578063f1cb7e06146103d257610121565b80638b95dd7114610272578063a22cb4651461028e578063ac9650d8146102aa578063bc1c58d1146102da578063d5fa2b001461030a57610121565b80633603d758116100f45780633603d758146101aa5780633b3b57de146101c657806359d1d43c146101f6578063691f343114610226578063773722131461025657610121565b806301ffc9a71461012657806310f13a8c146101565780632473313614610172578063304e6ade1461018e575b600080fd5b610140600480360381019061013b9190611a43565b610402565b60405161014d9190611a8b565b60405180910390f35b610170600480360381019061016b9190611b41565b610414565b005b61018c60048036038101906101879190611c2c565b610511565b005b6101a860048036038101906101a39190611d17565b61072a565b005b6101c460048036038101906101bf9190611d77565b6107eb565b005b6101e060048036038101906101db9190611d77565b6108bd565b6040516101ed9190611de5565b60405180910390f35b610210600480360381019061020b9190611e00565b6108f3565b60405161021d9190611ef0565b60405180910390f35b610240600480360381019061023b9190611d77565b610a03565b60405161024d9190611ef0565b60405180910390f35b610270600480360381019061026b9190611e00565b610af3565b005b61028c60048036038101906102879190612078565b610bb4565b005b6102a860048036038101906102a39190612151565b610c84565b005b6102c460048036038101906102bf91906121e7565b610def565b6040516102d1919061234b565b60405180910390f35b6102f460048036038101906102ef9190611d77565b610e07565b60405161030191906123b7565b60405180910390f35b610324600480360381019061031f91906123d9565b610ef7565b005b610340600480360381019061033b9190611d77565b610f24565b60405161034d919061243c565b60405180910390f35b610370600480360381019061036b9190612457565b610f4b565b60405161037d919061234b565b60405180910390f35b6103a0600480360381019061039b919061250d565b610f61565b005b6103bc60048036038101906103b791906125a2565b611109565b6040516103c99190611a8b565b60405180910390f35b6103ec60048036038101906103e791906125e2565b61119d565b6040516103f991906123b7565b60405180910390f35b600061040d8261129f565b9050919050565b8461041e81611319565b61042757600080fd5b8282600460008060008b815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008981526020019081526020016000208787604051610497929190612652565b908152602001604051809103902091826104b2929190612882565b5084846040516104c3929190612652565b6040518091039020867f448bc014f1536726cf8d54ff3d6481ed3cbc683c2591ca204274009afa09b1a187878787604051610501949392919061297f565b60405180910390a3505050505050565b8461051b81611319565b61052457600080fd5b6000858590509050838390508114610571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056890612a06565b60405180910390fd5b60005b818110156107205784848281811061058f5761058e612a26565b5b90506020028101906105a19190612a64565b600460008060008d815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008b815260200190815260200160002089898581811061061257610611612a26565b5b90506020028101906106249190612a64565b604051610632929190612652565b9081526020016040518091039020918261064d929190612882565b5086868281811061066157610660612a26565b5b90506020028101906106739190612a64565b604051610681929190612652565b6040518091039020887f448bc014f1536726cf8d54ff3d6481ed3cbc683c2591ca204274009afa09b1a18989858181106106be576106bd612a26565b5b90506020028101906106d09190612a64565b8989878181106106e3576106e2612a26565b5b90506020028101906106f59190612a64565b604051610705949392919061297f565b60405180910390a3808061071890612af6565b915050610574565b5050505050505050565b8261073481611319565b61073d57600080fd5b82826002600080600089815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600087815260200190815260200160002091826107aa929190612ba4565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d757884846040516107dd929190612ca1565b60405180910390a250505050565b806107f581611319565b6107fe57600080fd5b600080838152602001908152602001600020600081819054906101000a900467ffffffffffffffff168092919061083490612cc5565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050817fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db44460008085815260200190815260200160002060009054906101000a900467ffffffffffffffff166040516108b1919061243c565b60405180910390a25050565b6000806108cc836101cd61119d565b905060008151036108e15760009150506108ee565b6108ea816114b5565b9150505b919050565b60606004600080600087815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008581526020019081526020016000208383604051610963929190612652565b9081526020016040518091039020805461097c906126a5565b80601f01602080910402602001604051908101604052809291908181526020018280546109a8906126a5565b80156109f55780601f106109ca576101008083540402835291602001916109f5565b820191906000526020600020905b8154815290600101906020018083116109d857829003601f168201915b505050505090509392505050565b60606003600080600085815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008381526020019081526020016000208054610a6e906126a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9a906126a5565b8015610ae75780601f10610abc57610100808354040283529160200191610ae7565b820191906000526020600020905b815481529060010190602001808311610aca57829003601f168201915b50505050509050919050565b82610afd81611319565b610b0657600080fd5b82826003600080600089815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008781526020019081526020016000209182610b73929190612882565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78484604051610ba6929190612cf5565b60405180910390a250505050565b82610bbe81611319565b610bc757600080fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af7528484604051610bf9929190612d28565b60405180910390a2816001600080600088815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060008581526020019081526020016000209081610c7d9190612d58565b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce990612e9c565b60405180910390fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610de39190611a8b565b60405180910390a35050565b6060610dff6000801b84846114d8565b905092915050565b60606002600080600085815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008381526020019081526020016000208054610e72906126a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9e906126a5565b8015610eeb5780601f10610ec057610100808354040283529160200191610eeb565b820191906000526020600020905b815481529060010190602001808311610ece57829003601f168201915b50505050509050919050565b81610f0181611319565b610f0a57600080fd5b610f1f836101cd610f1a856116a7565b610bb4565b505050565b60006020528060005260406000206000915054906101000a900467ffffffffffffffff1681565b6060610f588484846114d8565b90509392505050565b84610f6b81611319565b610f7457600080fd5b6000858590509050808484905014610fc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb890612a06565b60405180910390fd5b60005b818110156110ff576000878783818110610fe157610fe0612a26565b5b905060200201359050858583818110610ffd57610ffc612a26565b5b905060200281019061100f9190612ebc565b600160008060008e815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008c81526020019081526020016000206000848152602001908152602001600020918261108b929190612ba4565b50887f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752828888868181106110c2576110c1612a26565b5b90506020028101906110d49190612ebc565b6040516110e393929190612f1f565b60405180910390a25080806110f790612af6565b915050610fc4565b5050505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606001600080600086815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000208054611219906126a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611245906126a5565b80156112925780601f1061126757610100808354040283529160200191611292565b820191906000526020600020905b81548152906001019060200180831161127557829003601f168201915b5050505050905092915050565b60007f59d1d43c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061131257506113118261170b565b5b9050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806113c057507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b156113ce57600190506114b0565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b81526004016114299190612f60565b602060405180830381865afa158015611446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146a9190612f90565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806114ac57506114ab8133611109565b5b9150505b919050565b600060148251146114c557600080fd5b600c6101000a6020830151049050919050565b60608282905067ffffffffffffffff8111156114f7576114f6611f4d565b5b60405190808252806020026020018201604052801561152a57816020015b60608152602001906001900390816115155790505b50905060005b8383905081101561169f576000801b85146115cf57600084848381811061155a57611559612a26565b5b905060200281019061156c9190612ebc565b60049060249261157e93929190612fc7565b906115899190613002565b90508581146115cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c4906130d3565b60405180910390fd5b505b6000803073ffffffffffffffffffffffffffffffffffffffff168686858181106115fc576115fb612a26565b5b905060200281019061160e9190612ebc565b60405161161c929190613123565b600060405180830381855af49150503d8060008114611657576040519150601f19603f3d011682016040523d82523d6000602084013e61165c565b606091505b50915091508161166b57600080fd5b8084848151811061167f5761167e612a26565b5b60200260200101819052505050808061169790612af6565b915050611530565b509392505050565b6060601467ffffffffffffffff8111156116c4576116c3611f4d565b5b6040519080825280601f01601f1916602001820160405280156116f65781602001600182028036833780820191505090505b509050600c6101000a82026020820152919050565b60007f691f3431000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061177e575061177d82611785565b5b9050919050565b60007fbc1c58d1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806117f857506117f7826117ff565b5b9050919050565b60007fcaf029d8000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611872575061187182611879565b5b9050919050565b60007fd700ff33000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806118ec57506118eb826118f3565b5b9050919050565b60007f4fbf0433000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061196657506119658261196d565b5b9050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a20816119eb565b8114611a2b57600080fd5b50565b600081359050611a3d81611a17565b92915050565b600060208284031215611a5957611a586119e1565b5b6000611a6784828501611a2e565b91505092915050565b60008115159050919050565b611a8581611a70565b82525050565b6000602082019050611aa06000830184611a7c565b92915050565b6000819050919050565b611ab981611aa6565b8114611ac457600080fd5b50565b600081359050611ad681611ab0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611b0157611b00611adc565b5b8235905067ffffffffffffffff811115611b1e57611b1d611ae1565b5b602083019150836001820283011115611b3a57611b39611ae6565b5b9250929050565b600080600080600060608688031215611b5d57611b5c6119e1565b5b6000611b6b88828901611ac7565b955050602086013567ffffffffffffffff811115611b8c57611b8b6119e6565b5b611b9888828901611aeb565b9450945050604086013567ffffffffffffffff811115611bbb57611bba6119e6565b5b611bc788828901611aeb565b92509250509295509295909350565b60008083601f840112611bec57611beb611adc565b5b8235905067ffffffffffffffff811115611c0957611c08611ae1565b5b602083019150836020820283011115611c2557611c24611ae6565b5b9250929050565b600080600080600060608688031215611c4857611c476119e1565b5b6000611c5688828901611ac7565b955050602086013567ffffffffffffffff811115611c7757611c766119e6565b5b611c8388828901611bd6565b9450945050604086013567ffffffffffffffff811115611ca657611ca56119e6565b5b611cb288828901611bd6565b92509250509295509295909350565b60008083601f840112611cd757611cd6611adc565b5b8235905067ffffffffffffffff811115611cf457611cf3611ae1565b5b602083019150836001820283011115611d1057611d0f611ae6565b5b9250929050565b600080600060408486031215611d3057611d2f6119e1565b5b6000611d3e86828701611ac7565b935050602084013567ffffffffffffffff811115611d5f57611d5e6119e6565b5b611d6b86828701611cc1565b92509250509250925092565b600060208284031215611d8d57611d8c6119e1565b5b6000611d9b84828501611ac7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611dcf82611da4565b9050919050565b611ddf81611dc4565b82525050565b6000602082019050611dfa6000830184611dd6565b92915050565b600080600060408486031215611e1957611e186119e1565b5b6000611e2786828701611ac7565b935050602084013567ffffffffffffffff811115611e4857611e476119e6565b5b611e5486828701611aeb565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e9a578082015181840152602081019050611e7f565b60008484015250505050565b6000601f19601f8301169050919050565b6000611ec282611e60565b611ecc8185611e6b565b9350611edc818560208601611e7c565b611ee581611ea6565b840191505092915050565b60006020820190508181036000830152611f0a8184611eb7565b905092915050565b6000819050919050565b611f2581611f12565b8114611f3057600080fd5b50565b600081359050611f4281611f1c565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f8582611ea6565b810181811067ffffffffffffffff82111715611fa457611fa3611f4d565b5b80604052505050565b6000611fb76119d7565b9050611fc38282611f7c565b919050565b600067ffffffffffffffff821115611fe357611fe2611f4d565b5b611fec82611ea6565b9050602081019050919050565b82818337600083830152505050565b600061201b61201684611fc8565b611fad565b90508281526020810184848401111561203757612036611f48565b5b612042848285611ff9565b509392505050565b600082601f83011261205f5761205e611adc565b5b813561206f848260208601612008565b91505092915050565b600080600060608486031215612091576120906119e1565b5b600061209f86828701611ac7565b93505060206120b086828701611f33565b925050604084013567ffffffffffffffff8111156120d1576120d06119e6565b5b6120dd8682870161204a565b9150509250925092565b60006120f282611da4565b9050919050565b612102816120e7565b811461210d57600080fd5b50565b60008135905061211f816120f9565b92915050565b61212e81611a70565b811461213957600080fd5b50565b60008135905061214b81612125565b92915050565b60008060408385031215612168576121676119e1565b5b600061217685828601612110565b92505060206121878582860161213c565b9150509250929050565b60008083601f8401126121a7576121a6611adc565b5b8235905067ffffffffffffffff8111156121c4576121c3611ae1565b5b6020830191508360208202830111156121e0576121df611ae6565b5b9250929050565b600080602083850312156121fe576121fd6119e1565b5b600083013567ffffffffffffffff81111561221c5761221b6119e6565b5b61222885828601612191565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b600061228782612260565b612291818561226b565b93506122a1818560208601611e7c565b6122aa81611ea6565b840191505092915050565b60006122c1838361227c565b905092915050565b6000602082019050919050565b60006122e182612234565b6122eb818561223f565b9350836020820285016122fd85612250565b8060005b85811015612339578484038952815161231a85826122b5565b9450612325836122c9565b925060208a01995050600181019050612301565b50829750879550505050505092915050565b6000602082019050818103600083015261236581846122d6565b905092915050565b600082825260208201905092915050565b600061238982612260565b612393818561236d565b93506123a3818560208601611e7c565b6123ac81611ea6565b840191505092915050565b600060208201905081810360008301526123d1818461237e565b905092915050565b600080604083850312156123f0576123ef6119e1565b5b60006123fe85828601611ac7565b925050602061240f85828601612110565b9150509250929050565b600067ffffffffffffffff82169050919050565b61243681612419565b82525050565b6000602082019050612451600083018461242d565b92915050565b6000806000604084860312156124705761246f6119e1565b5b600061247e86828701611ac7565b935050602084013567ffffffffffffffff81111561249f5761249e6119e6565b5b6124ab86828701612191565b92509250509250925092565b60008083601f8401126124cd576124cc611adc565b5b8235905067ffffffffffffffff8111156124ea576124e9611ae1565b5b60208301915083602082028301111561250657612505611ae6565b5b9250929050565b600080600080600060608688031215612529576125286119e1565b5b600061253788828901611ac7565b955050602086013567ffffffffffffffff811115612558576125576119e6565b5b612564888289016124b7565b9450945050604086013567ffffffffffffffff811115612587576125866119e6565b5b61259388828901612191565b92509250509295509295909350565b600080604083850312156125b9576125b86119e1565b5b60006125c785828601612110565b92505060206125d885828601612110565b9150509250929050565b600080604083850312156125f9576125f86119e1565b5b600061260785828601611ac7565b925050602061261885828601611f33565b9150509250929050565b600081905092915050565b60006126398385612622565b9350612646838584611ff9565b82840190509392505050565b600061265f82848661262d565b91508190509392505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806126bd57607f821691505b6020821081036126d0576126cf612676565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026127387fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826126fb565b61274286836126fb565b95508019841693508086168417925050509392505050565b6000819050919050565b600061277f61277a61277584611f12565b61275a565b611f12565b9050919050565b6000819050919050565b61279983612764565b6127ad6127a582612786565b848454612708565b825550505050565b600090565b6127c26127b5565b6127cd818484612790565b505050565b5b818110156127f1576127e66000826127ba565b6001810190506127d3565b5050565b601f82111561283657612807816126d6565b612810846126eb565b8101602085101561281f578190505b61283361282b856126eb565b8301826127d2565b50505b505050565b600082821c905092915050565b60006128596000198460080261283b565b1980831691505092915050565b60006128728383612848565b9150826002028217905092915050565b61288c838361266b565b67ffffffffffffffff8111156128a5576128a4611f4d565b5b6128af82546126a5565b6128ba8282856127f5565b6000601f8311600181146128e957600084156128d7578287013590505b6128e18582612866565b865550612949565b601f1984166128f7866126d6565b60005b8281101561291f578489013582556001820191506020850194506020810190506128fa565b8683101561293c5784890135612938601f891682612848565b8355505b6001600288020188555050505b50505050505050565b600061295e8385611e6b565b935061296b838584611ff9565b61297483611ea6565b840190509392505050565b6000604082019050818103600083015261299a818688612952565b905081810360208301526129af818486612952565b905095945050505050565b7f6c656e6774680000000000000000000000000000000000000000000000000000600082015250565b60006129f0600683611e6b565b91506129fb826129ba565b602082019050919050565b60006020820190508181036000830152612a1f816129e3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112612a8157612a80612a55565b5b80840192508235915067ffffffffffffffff821115612aa357612aa2612a5a565b5b602083019250600182023603831315612abf57612abe612a5f565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b0182611f12565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b3357612b32612ac7565b5b600182019050919050565b600082905092915050565b60008190508160005260206000209050919050565b601f821115612b9f57612b7081612b49565b612b79846126eb565b81016020851015612b88578190505b612b9c612b94856126eb565b8301826127d2565b50505b505050565b612bae8383612b3e565b67ffffffffffffffff811115612bc757612bc6611f4d565b5b612bd182546126a5565b612bdc828285612b5e565b6000601f831160018114612c0b5760008415612bf9578287013590505b612c038582612866565b865550612c6b565b601f198416612c1986612b49565b60005b82811015612c4157848901358255600182019150602085019450602081019050612c1c565b86831015612c5e5784890135612c5a601f891682612848565b8355505b6001600288020188555050505b50505050505050565b6000612c80838561236d565b9350612c8d838584611ff9565b612c9683611ea6565b840190509392505050565b60006020820190508181036000830152612cbc818486612c74565b90509392505050565b6000612cd082612419565b915067ffffffffffffffff8203612cea57612ce9612ac7565b5b600182019050919050565b60006020820190508181036000830152612d10818486612952565b90509392505050565b612d2281611f12565b82525050565b6000604082019050612d3d6000830185612d19565b8181036020830152612d4f818461237e565b90509392505050565b612d6182612260565b67ffffffffffffffff811115612d7a57612d79611f4d565b5b612d8482546126a5565b612d8f828285612b5e565b600060209050601f831160018114612dc25760008415612db0578287015190505b612dba8582612866565b865550612e22565b601f198416612dd086612b49565b60005b82811015612df857848901518255600182019150602085019450602081019050612dd3565b86831015612e155784890151612e11601f891682612848565b8355505b6001600288020188555050505b505050505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000612e86602983611e6b565b9150612e9182612e2a565b604082019050919050565b60006020820190508181036000830152612eb581612e79565b9050919050565b60008083356001602003843603038112612ed957612ed8612a55565b5b80840192508235915067ffffffffffffffff821115612efb57612efa612a5a565b5b602083019250600182023603831315612f1757612f16612a5f565b5b509250929050565b6000604082019050612f346000830186612d19565b8181036020830152612f47818486612c74565b9050949350505050565b612f5a81611aa6565b82525050565b6000602082019050612f756000830184612f51565b92915050565b600081519050612f8a816120f9565b92915050565b600060208284031215612fa657612fa56119e1565b5b6000612fb484828501612f7b565b91505092915050565b600080fd5b600080fd5b60008085851115612fdb57612fda612fbd565b5b83861115612fec57612feb612fc2565b5b6001850283019150848603905094509492505050565b600061300e8383612b3e565b826130198135611aa6565b92506020821015613059576130547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836020036008026126fb565b831692505b505092915050565b7f6d756c746963616c6c3a20416c6c207265636f726473206d757374206861766560008201527f2061206d61746368696e67206e616d6568617368000000000000000000000000602082015250565b60006130bd603483611e6b565b91506130c882613061565b604082019050919050565b600060208201905081810360008301526130ec816130b0565b9050919050565b600081905092915050565b600061310a83856130f3565b9350613117838584611ff9565b82840190509392505050565b60006131308284866130fe565b9150819050939250505056fea264697066735822122025f5d5670f6692f9f05bead681eb05dc5061ad3a94f05fef4450ed9d29e5e43764736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addr(bytes32)": {
        "params": {
          "node": "The FNS node to query."
        },
        "returns": {
          "_0": "The associated address."
        }
      },
      "clearRecords(bytes32)": {
        "params": {
          "node": "The node to update."
        }
      },
      "contenthash(bytes32)": {
        "params": {
          "node": "The FNS node to query."
        },
        "returns": {
          "_0": "The associated contenthash."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "name(bytes32)": {
        "params": {
          "node": "The FNS node to query."
        },
        "returns": {
          "_0": "The associated name."
        }
      },
      "setAddr(bytes32,address)": {
        "params": {
          "a": "The address to set.",
          "node": "The node to update."
        }
      },
      "setAddr(bytes32,uint256,bytes)": {
        "params": {
          "a": "The address to set.",
          "coinType": "The coin type of the address.",
          "node": "The node to update."
        }
      },
      "setAddrs(bytes32,uint256[],bytes[])": {
        "params": {
          "addrs": "The addresses to set.",
          "coinTypes": "The coin types of the addresses.",
          "node": "The node to update."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setContenthash(bytes32,bytes)": {
        "params": {
          "hash": "The contenthash to set",
          "node": "The node to update."
        }
      },
      "setName(bytes32,string)": {
        "params": {
          "node": "The node to update."
        }
      },
      "setText(bytes32,string,string)": {
        "params": {
          "key": "The key to set.",
          "node": "The node to update.",
          "value": "The text data value to set."
        }
      },
      "setTexts(bytes32,string[],string[])": {
        "params": {
          "keys": "The keys to set.",
          "node": "The node to update.",
          "values": "The text data value to set."
        }
      },
      "text(bytes32,string)": {
        "params": {
          "key": "The text data key to query.",
          "node": "The FNS node to query."
        },
        "returns": {
          "_0": "The associated text data."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addr(bytes32)": {
        "notice": "Returns the address associated with an FNS node."
      },
      "clearRecords(bytes32)": {
        "notice": "Increments the record version associated with an FNS node. May only be called by the owner of that node in the FNS registry."
      },
      "contenthash(bytes32)": {
        "notice": "Returns the contenthash associated with an FNS node."
      },
      "name(bytes32)": {
        "notice": "Returns the name associated with an FNS node, for reverse records. Defined in EIP181."
      },
      "setAddr(bytes32,address)": {
        "notice": "Sets the address associated with an FNS node. May only be called by the owner of that node in the FNS registry."
      },
      "setAddr(bytes32,uint256,bytes)": {
        "notice": "Sets the address associated with an FNS node. May only be called by the owner of that node in the FNS registry."
      },
      "setAddrs(bytes32,uint256[],bytes[])": {
        "notice": "Sets the addresses associated with FNS node. May only be called by the owner of that node in the FNS registry."
      },
      "setContenthash(bytes32,bytes)": {
        "notice": "Sets the contenthash associated with an FNS node. May only be called by the owner of that node in the FNS registry."
      },
      "setName(bytes32,string)": {
        "notice": "Sets the name associated with an FNS node, for reverse records. May only be called by the owner of that node in the FNS registry."
      },
      "setText(bytes32,string,string)": {
        "notice": "Sets the text data associated with an FNS node and key. May only be called by the owner of that node in the FNS registry."
      },
      "setTexts(bytes32,string[],string[])": {
        "notice": "Sets the text data associated with an FNS node and keys. May only be called by the owner of that node in the FNS registry."
      },
      "text(bytes32,string)": {
        "notice": "Returns the text data associated with an FNS node and key."
      }
    },
    "notice": "A simple resolver anyone can use; only allows the owner of a node to set its address.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 338,
        "contract": "contracts/PublicResolver.sol:PublicResolver",
        "label": "recordVersions",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint64)"
      },
      {
        "astId": 627,
        "contract": "contracts/PublicResolver.sol:PublicResolver",
        "label": "versionable_addresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))"
      },
      {
        "astId": 868,
        "contract": "contracts/PublicResolver.sol:PublicResolver",
        "label": "versionable_hashes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))"
      },
      {
        "astId": 1050,
        "contract": "contracts/PublicResolver.sol:PublicResolver",
        "label": "versionable_names",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_string_storage))"
      },
      {
        "astId": 1133,
        "contract": "contracts/PublicResolver.sol:PublicResolver",
        "label": "versionable_texts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage)))"
      },
      {
        "astId": 185,
        "contract": "contracts/PublicResolver.sol:PublicResolver",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(string => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes_storage)"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_uint64)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage)))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => mapping(string => string)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_string_storage)"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}